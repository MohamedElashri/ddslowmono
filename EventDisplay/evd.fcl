#include "evd_services.fcl"
#include "services.fcl"
#include "BackTracker.fcl"

process_name: EVD


services:
{
  RandomNumberGenerator: {} #ART native random number generator
  @table::core_services

  # EVD services
  PlotDrawingOptions:       @local::standard_plotdrawingopt
  GeometryDrawingOptions:   @local::standard_geomdrawingopt
  SimulationDrawingOptions: @local::standard_simdrawingopt
  RawDrawingOptions:        @local::standard_rawdrawingopt
  RecoDrawingOptions:       @local::standard_recodrawingopt
  ScanOptions:              @local::standard_scanopt
  SliceNavigator:           @local::standard_slicenavigator
  Colors:                   @local::standard_colors
  EventDisplay:             @local::standard_evd
}
services.BackTracker: @local::standard_backtracker



#Look at the input files
source:
{
#  module_type: NOvARawInputSource
#  FilterCorruptedNanoslices: true
#  DoFillFlatDAQData: false
  module_type: RootInput
  fileNames:   [ "novadata.root" ]
  maxEvents:   -1       # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
  analyzers:
  {
    evdisp:
    {
      module_type: EVD
    }
  }

  #list the modules for this path, order matters, filters reject all following items
  evd: [ evdisp ]

  #end_path are things that do not modify art::Event, includes analyzers and output modules. 
  #all items here can be run simultaneously
  end_paths: [ evd ]
}

#services.Colors.BlackOnWhite.val:             1
services.SliceNavigator.SliceOpt.val:         6
#services.Colors.RawQ_Palette.val:                 "LinGray"
services.RawDrawingOptions.Color.val:         1 # 0: charge; 1: time
services.RawDrawingOptions.RawDrawingOpt.val: 0
# turn off noise slice dimming:

services.SliceNavigator.SliceOpt.val:         0

# services.SimulationDrawingOptions.Text.val:   0 # 1

# services.SimulationDrawingOptions.Draw.val:   0 # 6

# set the histogram range:

services.RawDrawingOptions.ADCRange.val:      [ 100, 4096 ]

# set the range of drawn hits:

services.Colors.RawQ_Range.val:               [ 100, 4096 ]

# services.RawDrawingOptions.ADCRange.val:      [ 225, 4096 ]

# services.Colors.RawQ_Range.val:               [ 225, 4096 ]

# services.RawDrawingOptions.ADCRange.val:      [ 8, 1000 ]

# services.Colors.RawQ_Range.val:               [ 8, 1000 ]

services.RawDrawingOptions.TimeRange.val:     [ -50, 5050 ]

services.Colors.RawT_Range.val:               [ -50, 5050 ]

# services.RawDrawingOptions.TimeRange.val:     [ -50, 300 ]

# services.Colors.RawT_Range.val:               [ -50, 300 ]

services.RecoDrawingOptions.ClusterStyle.val:  2

# services.RecoDrawingOptions.ClustersAdd.val:   [ "monocluster" ]

# services.RecoDrawingOptions.ClustersAdd.val:   [ "monoslicer" ]

#services.RecoDrawingOptions.ClustersAdd.val:   [ "monotrack" ]

# services.RecoDrawingOptions.TrackOpt.val:      3

services.RecoDrawingOptions.Tracks.val:        [ "cosmictrack" ]

# services.RecoDrawingOptions.Tracks.val:        [ "monotrack" ]

# services.RecoDrawingOptions.HoughOpt.val: 2

# services.RecoDrawingOptions.Hough.val:    [ "hough" ]

# this function has not been implemented yet:

# services.RecoDrawingOptions.ClusterIndex.val:  [[2]]

